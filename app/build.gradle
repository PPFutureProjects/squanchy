buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
        jcenter()
    }

    dependencies {
        classpath gradlePlugins.fabric
        classpath gradlePlugins.buildProperties
        classpath gradlePlugins.androidApt
    }
}

plugins {
    id "me.tatarka.retrolambda" version "3.5.0"
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'com.novoda.build-properties'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'com.github.triplet.play'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

buildProperties {
    application {
        file project.file('../team-props/application.properties')
    }
    secrets {
        file project.file('../team-props/secrets.properties')
    }
    releaseSigningConfig {
        file project.file('../team-props/releaseSigningConfig.properties')
    }
}

android {
    compileSdkVersion Integer.parseInt(project.COMPILE_SDK_VERSION)
    buildToolsVersion project.BUILD_TOOLS_VERSION

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId((buildProperties.application['applicationId'] | buildProperties.env['APPLICATION_ID']).string)

        minSdkVersion Integer.parseInt(project.MIN_SDK_VERSION)
        targetSdkVersion Integer.parseInt(project.TARGET_SDK_VERSION)

        multiDexEnabled true

        versionCode Integer.parseInt(project.VERSION_CODE)
        versionName project.VERSION_NAME

        manifestPlaceholders += [
                fabricApiKey: (buildProperties.secrets['fabricApiKey'] | buildProperties.env['FABRIC_API_KEY']).string
        ]

        resValueProperty 'app_name', (buildProperties.application['applicationName'] | "Squanchy")
        resValueProperty 'api_value_twitter_api_key', (buildProperties.secrets['twitterApiKey'] | buildProperties.env['TWITTER_API_KEY'])
        resValueProperty 'api_value_twitter_secret', (buildProperties.secrets['twitterSecret'] | buildProperties.env['TWITTER_SECRET'])
        resValueProperty 'api_value_google_maps_api_key', (buildProperties.secrets['googleMapsApiKey'] | buildProperties.env['GOOGLE_MAPS_API_KEY'])
        resValueProperty 'api_value_base_url', (buildProperties.secrets['baseUrl'] | buildProperties.env['BASE_URL'])
        resValueProperty 'social_query', (buildProperties.application['socialQuery'] | "#AndroidDev")
    }

    if (System.getenv('CI') == null) {
        signingConfigs {
            config {
                signingConfigProperties buildProperties.releaseSigningConfig
            }
        }

        buildTypes {
            release {
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                signingConfig signingConfigs.config
            }
        }
    }

    lintOptions {
        lintConfig file("$rootProject.projectDir/team-props/lint.xml")
        abortOnError false
    }
}

play {
    jsonFile = file('../team-props/play-store-keys.json')
}

dependencies {
    compile libraries.app.timber

    compile libraries.app.jodaTimeAndroid

    compile libraries.app.lottie
    
    compile libraries.app.playAnalytics

    compile libraries.app.firebase
    compile libraries.app.firebaseDb
    compile libraries.app.firebaseMessaging

    compile libraries.app.rx
    compile libraries.app.rxAndroid

    compile libraries.app.supportAppCompat
    compile libraries.app.supportDesign

    compile libraries.app.crashlytics
    compile libraries.app.tweetUi

    compile libraries.app.viewPagerAdapter

    apt libraries.app.autoValue
    provided libraries.app.autoValue

    compile libraries.app.dagger
    apt libraries.app.daggerCompiler

    retrolambdaConfig libraries.app.retrolambda
}

apply plugin: 'com.google.gms.google-services'
